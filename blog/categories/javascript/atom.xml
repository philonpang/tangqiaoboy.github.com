<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-05-06T20:02:13+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于UIWebView和PhoneGap的总结]]></title>
    <link href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/"/>
    <updated>2012-03-24T20:19:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>今天参加了Adobe和CSDN组织的一个关于<a href="http://hui.csdn.net/MeetingInfo.aspx?mid=99">PhoneGap的开发讲座</a> ，而PhoneGap在iOS设备上的实现就是通过UIWebView控件来展示html内容，并且与native代码进行交互的。</p>

<p>正好我们在做有道云笔记的iPad版，因为我们也是使用UIWebView来展示笔记内容，所以也需要做js与native代码相互调用的事情。所以在这儿顺便总结一下UIWebView在使用上的细节，以及谈谈我对PhoneGap的看法。</p>

<!-- more -->


<h2>机制</h2>

<p>首先我们需要让UIWebView加载本地HTML。使用如下代码完成：</p>

<p>``` objc</p>

<pre><code>NSString * path = [[NSBundle mainBundle] bundlePath];
NSURL * baseURL = [NSURL fileURLWithPath:path];
NSString * htmlFile = [[NSBundle mainBundle] pathForResource:@"index" ofType:@"html"];
NSString * htmlString = [NSString stringWithContentsOfFile:htmlFile encoding:(NSUTF8StringEncoding) error:nil];
[self.webView loadHTMLString:htmlString baseURL:baseURL];
</code></pre>

<p>```</p>

<p>接着，我们需要让js能够调用native端。iOS SDK并没有原生提供js调用native代码的API。但是UIWebView的一个delegate方法使我们可以做到让js需要调用时，通知native。在native执行完相应调用后，可以用stringByEvaluatingJavaScriptFromString方法，将执行结果返回给js。这样，就实现了js与native代码的相互调用。</p>

<p>以下是PhoneGap相关调用的示例代码：</p>

<p>``` objc
// Objective-C语言
&ndash; (BOOL)webView:(UIWebView *)webView</p>

<pre><code>shouldStartLoadWithRequest:(NSURLRequest *)request 
navigationType:(UIWebViewNavigationType)navigationType {
   NSURL * url = [request URL];
   if ([[url scheme] isEqualToString:@"gap"]) {
        // 在这里做js调native的事情
        // ....
        // 做完之后用如下方法调回js
        [webView stringByEvaluatingJavaScriptFromString:@"alert('done')"];
        return NO;
    }       
    return YES;
</code></pre>

<p>}
```</p>

<p>具体让js通知native的方法是让js发起一次特殊的网络请求。这里，我们和PhoneGap都是使用加载一个隐藏的iframe来实现的，通过将iframe的src指定为一个特殊的URL，实现在delegate方法中截获这次请求。</p>

<p>以下是PhoneGap相关调用的示例代码：</p>

<p>```
// Javascript语言
// 通知iPhone UIWebView 加载url对应的资源
// url的格式为: gap:something
function loadURL(url) {</p>

<pre><code>var iFrame;
iFrame = document.createElement("iframe");
iFrame.setAttribute("src", url);
iFrame.setAttribute("style", "display:none;");
iFrame.setAttribute("height", "0px");
iFrame.setAttribute("width", "0px");
iFrame.setAttribute("frameborder", "0");
document.body.appendChild(iFrame);
// 发起请求后这个iFrame就没用了，所以把它从dom上移除掉
iFrame.parentNode.removeChild(iFrame);
iFrame = null;
</code></pre>

<p>}
```</p>

<p>在这里，可能有些人说，通过改document.location也可以达到相同的效果。关于这个，我和zyc专门试过，一般情况下，改document.location是可以，但是改document.location有一个很严重的问题，就是如果我们连续2个js调native，连续2次改document.location的话，在native的delegate方法中，只能截获后面那次请求，前一次请求由于很快被替换掉，所以被忽略掉了。</p>

<p>我也专门去Github上查找相关的开源代码，它们都是用过iframe来实现调用的，例如这个：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">https://github.com/marcuswestin/WebViewJavascriptBridge</a></p>

<p>关于这个，我也做了一个Demo来简单示例，地址如下：<a href="https://github.com/tangqiaoboy/UIWebViewSample">https://github.com/tangqiaoboy/UIWebViewSample</a></p>

<h2>参数的传递</h2>

<p>以上的示例代码为了讲清楚机制，所以只是示例了最简单的相互调用。但实际上js和native相互调用时，常常需要传递参数。</p>

<p>例如，有道云笔记iPad版用UIWebView显示笔记的内容，当用户点击了笔记中的附件，这个时候，js需要通知native到后台下载这个笔记附件，同时通知js当前的下载进度。对于这个需求，js层获得用户点击事件后，就需要把当前点击的附件的ID传递给native，这样native才能知道下载哪个附件。</p>

<p>参数传递最简单的方式是将参数作为url的一部分，放到iFrame的src里面。这样UIWebView通过截取分析url后面的内容即可获得参数。但是这样的问题是，该方法只能传递简单的参数信息，如果参数是一个很复杂的对象，那么这个url的编解码将会很复杂。对此，我们的有道云笔记和PhoneGap采用了不同的技术方案。</p>

<ul>
<li>我们的技术方案是将参数以JSON的形式传递，但是因为要附加在url之后，所以我们将JSON进行了Base64编码，以保证url中不会出现一些非法的字符。</li>
<li>PhoneGap的技术方案是，也是用JSON传递参数，但是将JSON放在UIWebView中的一个全局数组中，UIWebView当需要读取参数时，通过读取这个全局数组来获得相应的参数。</li>
</ul>


<p>相比之下，应该说PhoneGap的方案更加全面，适用于多种场景。而我们的方案简洁高效，满足了我们自己产品的需求。</p>

<h2>同步和异步</h2>

<p>因为iOS SDK没有天生支持js和native相互调用，大家的技术方案都是自己实现的一套调用机制，所以这里面有同步异步的问题。细心的同学就能发现，js调用native是通过插入一个iframe，这个iframe插入完了就完了，执行的结果需要native另外用stringByEvaluatingJavaScriptFromString方法通知js，所以这是一个异步的调用。</p>

<p>而stringByEvaluatingJavaScriptFromString方法本身会直接返回一个NSString类型的执行结果，所以这显然是一个同步调用。</p>

<p>所以js call native是异步，native call js是同步。在处理一些逻辑的时候，不可避免需要考虑这个特点。</p>

<p>这里顺便说一个android，其实在android开发中，js调native是同步的，但是PhoneGap为了将自己做成一个跨平台的框架，所以在android的js call native的native端，用 new Thread新建了一个执行线程，这样把android的js call native也变成了异步调用。</p>

<h2>UIWebView的问题</h2>

<h3>线程阻塞问题</h3>

<p>我们在开发中发现，当在native层调用stringByEvaluatingJavaScriptFromString方法时，可能由于javascript是单线程的原因，会阻塞原有js代码的执行。这里我们的解决办法是在js端用defer将iframe的插入延后执行。</p>

<h3>主线程的问题</h3>

<p>UIWebView的stringByEvaluatingJavaScriptFromString方法必须是主线程中执行，而主线程的执行时间过长就会block UI的更新。所以我们应该尽量让stringByEvaluatingJavaScriptFromString方法执行的时间短。</p>

<p>有道云笔记在保存的时候，需要调用js获得笔记的完整html内容，这个时候如果笔记内容很复杂，就会执行很长一段时间，而因为这个操作必须是主线程执行，所以我们显示“正在保存”的UIAlertView完全无法正常显示，整个UI界面完全卡住了。在新的编辑器里，我们更新了获得html内容的代码，才将这个问题解决。</p>

<h3>键盘控制</h3>

<p>做iOS开发的都知道，当我们需要键盘显示在某个控件上时，可以调用[obj becomeFirstResponder]方法来让键盘出来，并且光标输入焦点出现在该控件上。</p>

<p>但是这个方法对于UIWebView并不可用。也就是说，我们无法通过程序控制让光标输入焦点出现在UIWebView上。
关于这个问题，我在stackoverflow上专门<a href="http://stackoverflow.com/questions/9835956/show-keyboard-in-contenteditable-uiwebview-programmatically">问了一下</a>，还是没有得到很好的解决办法。</p>

<h3>CommonJS规范</h3>

<p>commonJS是一个模块块加载的规范。而AMD是该规范的一个草案，CommonJS AMD规范描述了模块化的定义，依赖关系，引用关系以及加载机制，其规范原文在<a href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">这里</a> 。它被requireJS，NodeJs，Dojo，jQuery等开源框架广泛使用。<a href="http://blog.csdn.net/dojotoolkit/article/details/6076668">这里</a>还有一篇不错的中文介绍文章。</p>

<p>AMD规范需要用目录层级当作包层次，这一点就象java一样。之前我以为iOS打包后的ipa资源文件中不能有资源目录层级关系，今天在会上问了一下，原来是我自己弄错了。如果需要将目录层级带入ipa资源文件中，只需要将该目录拖入工程中，然后选择“Create groups for any added folders”。如下图所示，这样目录层级能够打包到ipa文件中。</p>

<p><img src="/images/uiwebview-commonjs-folder.jpg"></p>

<h2>调试</h2>

<p>在iOS设备中调试javascript是一件相当苦逼的事情，拿pw的话来说：“一下子回到了ie6时代”。当然，业界也有一些调试工具可以用的。</p>

<p>我们在开发时主要采用的是<a href="http://phonegap.github.com/weinre/">weinre</a>这个框架。用这个框架，可以做一些基本的调试工作，但是它现在功能还没有象pc上的js调试器那么强大，例如它不能下断点，另外如果有js执行错误，它也无法正确的将错误信息报出。它还有一些bug，例如在mac机下，如果你同时连接了有线网和无线网，那么weinre将无法正确地连接到调试页面。</p>

<p>但终究，它是现在业界现存的唯一相对可用的调试工具了。本次的PhoneGap讲座的第一位演讲者董龙飞有一篇博客很好地介绍了weinre的使用，地址是<a href="http://www.donglongfei.com/2012/03/debug-phonegap-app-using-weinre/">这里</a>，推荐感兴趣的同学看看。即使不用PhoneGap，weinre也能给你在移动设备上设计网页带来方便。</p>

<p>（2013年10月22日更新）：关于调试这一块儿，从WWDC2012开始，苹果已经支持用safari来连接iPhone模拟器里面的UIWebView进行调试了，所以调试上已经方便了很多。详细的教程可以查看: WWDC2012 Session 600《Debuging UIWebViews and Websites on iOS》</p>

<h2>我对PhoneGap的看法</h2>

<p>今天的大会上，2位演讲者把PhoneGap吹得相当牛。但是其实真正用过的人才能知道，PhoneGap还是有相当多的问题的。至少我知道在网易就有一个使用PhoneGap而失败的项目，所以我认为PhoneGap还是有它相当大的局限性的。</p>

<p>我认为PhoneGap有以下3大问题：</p>

<ol>
<li><p>首先，PhoneGap的编程语言其实是javascript，这对于非前端工作者来说，其实学习起来和学习原生的objective-C或Java编程语言难度差不多，而且由于历史原因，javascript语言本身的问题比其它语言都多。要想精通javascript，相当不易。</p></li>
<li><p>然后，PhoneGap的目标是方便地创建跨平台的应用。但是其实苹果和google都发布了自己的人机交互指南。有些情况下，苹果的程序和android程序有着不同的交互原则的。象有道云笔记的<a href="http://itunes.apple.com/us/app/id450748070?ls=1&amp;mt=8">iPhone版</a>和<a href="http://m.note.youdao.com/noteproxy/download?todo=download&amp;platform=android&amp;keyfrom=note.web">android版</a>，就有着完全不同的界面和交互。使用PhoneGap就意味着你的程序在UI和交互上，既不象原生的iphone程序，又不象原生的android程序。</p></li>
<li><p>最后，性能问题。Javascript终究无法和原生的程序比运行效率，这一点在当你要做一些动画效果的时候，就能显现得很明显。</p></li>
</ol>


<p>当然，PhoneGap的优势也很明显，如果你是做图书类，查询类，小工具类应用的话，这些应用UI交互不复杂，也不占用很高的cpu资源，PhoneGap将很好地发挥出它的优势。对于这类应用：</p>

<ol>
<li><p>你只需要编写一次，则可以同时完成iOS, android, windows phone等版本的开发。</p></li>
<li><p>如果改动不大，只是内容升级，那它升级时只需要更新相应的js文件，而不需要提交审核，而一般正常提交苹果的app store审核的话，常常需要一周时间。</p></li>
</ol>


<p>所以PhoneGap不是万能的，但也不是没有用，它有它擅长的领域，一切都看你是否合理地使用它。</p>

<p>最后，推荐<a href="http://www.phonegap.cn/">PhoneGap中国网站</a> ，在这里，你可以找到为数不多的中文资料。</p>

<h2>对js的感想</h2>

<p>现在前端工程师相当牛逼啊。前端工程师不但可以写前端网页，还可以用Flex写桌面端程序，可以用nodejs写server端程序，可以用PhoneGap写移动端程序，这一切，都是基于javascript语言的，还有最新出的windows 8，原生支持用js来写Metro程序，世界已经无法阻止前端工程师了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用javascript协助导入图片]]></title>
    <link href="http://blog.devtang.com/blog/2012/01/23/use-javascript-to-import-pictures/"/>
    <updated>2012-01-23T23:10:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/01/23/use-javascript-to-import-pictures</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>先说说需求。春节回家见爸妈，老爸迷上了摄影。他把平时的照片都上传到了<a href="http://photo.chengdu.cn/">成都图片网</a>,这个成都图片网专门有一个“快拍成都”的版块，用于大家将随手拍的生活中的图片分享上去。每天编辑还会选出一张最有特色的图片，刊登到《成都商报》上。</p>

<!--more-->


<p>快拍成都版块的网址是：<a href="http://photo.chengdu.cn/diary.php">http://photo.chengdu.cn/diary.php</a>，另外，这个成都图片网还带有一个"拍客论坛"，论坛的网址是：<a href="http://photo.chengdu.cn/bbs/">http://photo.chengdu.cn/bbs/</a>。</p>

<p>老爸在兴奋地给我介绍完他的光辉成果之后,提出了他的需求：他希望在“快拍成都”发完图片后，能够自动将图片保存到他在"拍客论坛"上的“个人相册”中。</p>

<h2>调研</h2>

<p>简单研究了一个这个网站。明显这个网站自带的论坛是改的别人的开源系统，而“快拍成都”这个功能由于需求比较特别，能看出来是另外开发的另一套系统。这2套系统仅仅是将用户个人认证功能合在一起。并没有实现图片从“快拍成都”导入到“论坛相册”的功能。所以说，只能自己想办法实现了。要么全部手工弄一遍，要么写程序来做。</p>

<p>简单尝试了一下手工copy，发现完全不可行，主要是图片介绍的文字是用css来排版到一起的，如果单纯复制文字出来，文字的顺序会乱掉。所以只能编程搞了。</p>

<p>我们需要用编程实现的技术步骤很简单：</p>

<ol>
<li>模拟登陆到快拍成都。</li>
<li>从个人页面中点击“我的作品”，查看自己的作品列表。</li>
<li>将自己的作品列表中的每一个作品中，包括的所有图片及相对应的介绍文字都下载下来。</li>
<li>模拟登陆到"拍客论坛“中。</li>
<li>对于每一个作品，在论坛的相册中建立一个对应的相册，然后将对应的图片上传上去，并且配上对应的文字。</li>
</ol>


<h2>技术方案</h2>

<p>其实我最熟的语言是Java，但是如果用Java来做这件事情的话，我需要：</p>

<ol>
<li>了解登陆的Form，模拟浏览器进行登陆过程，然后保存登陆成功后的Cookie.</li>
<li>模拟各种网页请求，将对应的页面内容抓取过来。</li>
<li>解析html内容，用正则表达式匹配到图片的url和介绍文字的内容。然后把这些都保存下来。</li>
<li>了解拍客论坛这个bbs的相应Form的内容，模拟上传图片和介绍。</li>
</ol>


<p>这些步骤比较麻烦，而且有些做得好的网站，为了防止模拟登陆，通常在登陆前会执行一段混淆的javascript，把Form中的用户名和密码进行进一步的加工再POST到服务器上。考虑到这个网站是改的开源的bbs，可能会有相应的功能。那这样的话我还需要看js的代码，了解它又做了哪些事，把对应的逻辑用Java实现了。</p>

<p>每种语言都有它擅长的地方，对于网页来说，最方便处理的当然是Javascript了。如果用Javascript，上面的那些麻烦的步骤都可以省略掉了。于是最后，我写了2段Javascript来处理这个工作。</p>

<p>第一段Javascript，取出相应的图片url和介绍文字，生成第二个Javascript代码</p>

<p>`&ldquo; javascript
var ps = $(&lsquo;.lazyload&rsquo;);
var ts = $(&lsquo;h5&rsquo;);
for (var i = 0; i &lt; ps.length; ++i) {
   console.log($(ps[i]).attr(&lsquo;original&rsquo;));<br/>
}
console.log($($(&lsquo;h2&rsquo;)[0]).text());
console.log(&rdquo;);</p>

<p>for (var i = 0; i &lt; ps.length; ++i) {
   console.log(&lsquo;document.getElementsByTagName(&ldquo;textarea&rdquo;)[&rsquo; + i + &lsquo;].value=&ldquo;\&rsquo;);
   console.log("图片属性：&rdquo; + $(ts[i<em>2]).find(&lsquo;p&rsquo;).text() + &lsquo;\&rsquo;);
   console.log(&ldquo; 图片描述：&rdquo; + $(ts[i</em>2+1]).find(&lsquo;p&rsquo;).text() + &lsquo;&ldquo;;&rsquo;);
}</p>

<p>```
第二段Javascript由第一段Js生成，用于在论坛相册中将对应图片的介绍文字填上。</p>

<p>有了上面的那段JS，我导照片的步骤如下：</p>

<ol>
<li>打开“快拍成都”的页面，找到需要导出的照片专题。</li>
<li>执行我上面提到的那段js，它会将需要下载的图片列出来，并且生成另一段js.</li>
<li>手工下载上面列出来的图片到本地。</li>
<li>在论坛的个人相册中，把这些图片选择上传上去，然后执行生成的另一段js，图片介绍就会自动填上了。</li>
</ol>


<p>本来上传图片这一步也应该自动完成的，但是我无法解决浏览器对于js的限制：浏览器不允许js帮用户选择本地文件。所以这一步只能用手动来完成。</p>

<p>导图片的工作最终在js脚本的协助下，花了1个半小时完成了。不过心里还是有点不爽，听zyc说可以用nodejs和jsdom来在命令行中模拟浏览器相关的功能，所以打算试试把这个工作用nodejs和jsdom来完成。正在研究中，完成后再写一篇总结的博客。</p>
]]></content>
  </entry>
  
</feed>

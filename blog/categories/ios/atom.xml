<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-05-02T21:27:02+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[苹果推出了官方的分析工具]]></title>
    <link href="http://blog.devtang.com/blog/2015/05/01/apple-release-analytics-beta/"/>
    <updated>2015-05-01T20:51:29+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/05/01/apple-release-analytics-beta</id>
    <content type="html"><![CDATA[<p>{% img /images/apple-analytics-beta.jpg %}</p>

<p>苹果在五月一号这天，向开发者发送邮件，邀请参与他自家的分析工具的试用。虽然现在我们公司猿题库的帐号还处于排队等待的状态中，不过我们可以从苹果的介绍中看出这个工具的特点</p>

<h3>无需额外操作</h3>

<blockquote><p>You won’t need any additional code or app updates, and there’s no extra cost.</p></blockquote>

<p>可见相关功能是直接集成进 iOS 系统中的，对应用来说没有任何其它的代价。</p>

<h3>可以做的事情</h3>

<ul>
<li>获得用户查看 App Store 上应用页面的次数和频率</li>
<li>获得用户打开你的应用的频率</li>
<li>检查你的应用销售情况，包括应用内支付</li>
<li>创建自定义的运营活动链接，并且监控该链接带来的效果</li>
<li>了解哪些网站给你的应用页面带来了流量</li>
</ul>


<h3>总结</h3>

<p>这个分析工具弥补了 iOS 应用长久以来在这方面的功能缺失。由于苹果的限制，上面提到的一些功能，例如统计运营活动效果、统计查看 AppStore 页面效果等功能，第三方工具是无法提供的。</p>

<p>苹果提供这样的工具，有助于开发者更加有效地开展市场推广和运营相关的工作。</p>

<p>稍后我会更新一些使用体验，愿大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QCon 参会笔记]]></title>
    <link href="http://blog.devtang.com/blog/2015/04/24/qcon-2015-note/"/>
    <updated>2015-04-24T21:24:28+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/04/24/qcon-2015-note</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>这两天在北京国际会议中心，QCon 全球软件开发大会正如期举行，我有幸参加了此次会议。QCon 此次参会的人数远远超过了主办方的预期，以至于提前关闭了报名通道。大会现场很多演讲人员爆满，现场周围都站满了人。</p>

<p>在会议上，我不但听了很多感兴趣的演讲，还见到了很多在网上多次交流，但从未谋面的好朋友，也认识了很多新朋友。这次交流对我来说收获挺多，在此总结一下。</p>

<h2>和 gaosboy 聊天</h2>

<p><a href="http://jiajun.org/">gaosboy</a> 是 <a href="http://segmentfault.com/">SegmentFault</a> 的联合创始人，现在在天猫。他在天猫工作两年了，在做 iOS 基础架构方面的事情。我和他之前在网上交流多次，也是由于他的引荐，我才加入了 InfoQ 的编辑团队。我和他交流了一些团队发展的问题，以及 iOS 的一些技术细节。</p>

<h3>关于应用架构和开发方式</h3>

<p>关于应用开发，天猫是将产品划分成很多组，每个小组的功能做完通过测试后，再 merge 到发布分支，发布分支要发布前，再进行一次集成测试，就可以上线了。这样可以各组之间不必完全同步进行开发，做完的就可以上线，没做完的小组顶多是赶不上某些上线，不会影响别的组的工作。</p>

<p>天猫也做了很多方便后台定制客户端的工作，例如用 JSON 来定制界面，又如将 UI 控件进行标准化。通过和他的交流，我能感受到天猫的产品是很偏重运营的，所以他们在做技术架构的时候，会考虑到怎么方便运营同事能够在后台快速配置生成运营相关的界面。某一方面，他们在努力尝试跨平台的各种方案，也是为了解决运营上的快速变化和配置便捷的需求。这让我认识到，其实没有绝对意义上标准的应用架构，好的应用架构应该是与自己的产品特点紧密联系的，这样才是最合适的。</p>

<h3>关于 UIWebView 与 其它界面的混排</h3>

<p>gaosboy 也给我分享了关于原生界面和 UIWebView 混合排版的一些技巧，还挺有意思的。如果做过这方面工作的朋友就会知道，UIWebView 如果外层再套 UIScrollView，在内部和外部都可以上下滑动时，体验其实是不太好的，通常的做法是把内部的 UIWebView 高度完全展开，使得内部不再可以滑动，然后只用滑动外层的 UIScrollView 即可。</p>

<p>但是这个方案也有一些问题，就是 UIWebView 内容的高度并不是可以很方便地获取的。因为 UIWebView 中的图片资源会异步加载，加上一些 JavaScript 逻辑也可能在 DOM 加载完成后二次操作 DOM 做界面调整，所以原生层很难方便地知道 UIWebView 的高度。</p>

<p>gaosboy 给我分享了他在 SegmentFault 使用的技巧：利用 KVO 来监控 UIWebView 的 <code>contentSize</code> 的变化。这样可以随时知道 UIWebView 的内容高度有变化，然后就可以做相应的调整了。</p>

<p>gaosboy 另外还给我分享了一个 “黑科技”，即将原生的控件直接用 <code>addSubView</code> 插入到 UIWebView 的内部，然后在 UIWebView 内部用 css 控制相应的 padding ，给原生的控件留出相应的空白位置。</p>

<p>这个方案的优点是：这种办法可以保证整个界面只需要一个 UIWebView 即可完成。否则用之前的办法，如果某个界面有几个不相连的地方要用 UIWebView 展示，就得实例化多个 UIWebView 了。</p>

<p>但之所以把它称做 “黑科技”，是因为这种方法也有一些缺点：</p>

<ul>
<li>一个是直接往系统控件里面插子 view 这种操作有很大风险。因为你不知道哪一天 iOS 系统升级后，这些控件内部的机制有没有调整，会不会造成这种黑科技挂掉。典型的例子就是 iOS8 刚升级那阵，微信的 ActionSheet 都弹不出来了。另外 iOS 8.3 的时候，我记得微信也出现过返回键失灵的情况。这些都是基于系统控件的一些内部机制做了一些事情，由于系统升级机制改变而受到的影响。</li>
<li>由于 padding 是事先留好的，如果是往 UIWebView 的中间插入元素，那么当页面调整后，需要重新更新控件的位置。</li>
</ul>


<p>但是，这个方案当前确实被 gaosboy 他们在天猫采用过，所以我觉得也是一个挺有意思的、在某些实际场景下可以考虑的方案。</p>

<h2>Native 和 Web 融合 &ndash; 听天猫前端开发专家鬼道（徐凯）的分享</h2>

<p>鬼道老师所在的团队是最先尝试使用 React Native 的，之前我总结的 iOS 开发周报中的好几篇文章都是出自他们团队。我在这里将他的分享简单整理如下。</p>

<h3>关于 WebView</h3>

<p>鬼道首先分享了 WebView 在客户端的问题和特点，主要有：</p>

<ul>
<li>首次加载慢 &ndash; 用本地 zip 包来解决</li>
<li>长列表占内存 &ndash; 用他们开源出来的 xList 来解决（类似 UITableView 的复用方案，不过我搜了一下，只找到一个 0 star 的项目：<a href="https://github.com/redcatmiss/xlist">xlist</a>，很可能找错了）</li>
<li>动画、w3c 慢</li>
<li>需要做 Hybird API</li>
<li>更新快</li>
<li>可以用 Hotpatch 来修复线上问题</li>
<li>他们做了一套叫 Windvane 的框架，可以对 WebView 的强化，对缓存和网络的扩展。他说好象也开源了，不过我没有搜到，应该是没有开源。</li>
</ul>


<p>他们另外做了 WebView Crash 监控，通过冷加载，重构，把 Crash 率从 0.7% 降到 0.1%。</p>

<p>分享中还涉及一个技巧：把两倍的图的质量调整到 50%，以节省 WebView 的内存占用。</p>

<h3>React Native</h3>

<p>Native 可以带来更好的人机交互体验：</p>

<ul>
<li>手势识别</li>
<li>动画效果</li>
<li>原生控件</li>
<li>更合适的线程模型（如图象解码，文本渲染）</li>
</ul>


<p>Web 上的高效的开发效率和发布能力</p>

<p>业界现在使用 React Native 的应用:</p>

<ul>
<li>FB ads/F8</li>
<li>Chinese Flashcards</li>
<li>天猫</li>
</ul>


<p>比较重要的是，鬼道分享了 React Native 几个重要的性能指标：</p>

<ul>
<li>内存：React Native 内存上的优势相对 WebView 比较明显，和原生的稍多一点。</li>
<li>CPU：CPU 上也比 WebView 有优势</li>
<li>启动时间：比 WebView 快 1 倍的样子</li>
<li>体积：我问了一下，几百 K 而已</li>
</ul>


<p>要使用 React Native，基础环境还需要的工作：</p>

<ul>
<li>埋点方案</li>
<li>缓存打包方案</li>
<li>网络改造</li>
<li>Framework 集成</li>
<li>发布机制改造</li>
<li>jsbundle 优化</li>
</ul>


<h2>Semi-Hybrid App Framework &ndash; Geek Zoo Studio 联合创始人 郭虹宇</h2>

<p>老郭的项目说实话最早应该是被我关注到的，当时他还在做 BeeFramework。他在阿里技术沙龙的第一次分享是我邀请的，他的第一篇采访稿是我代表 InfoQ 做的。老郭一直在尝试 Semi-Hybrid 这种混合编程方案，这个也是我个人挺感兴趣的一个技术方向。</p>

<p>由于我私下和他交流得太多，他的项目我也非常关注，这个分享我获得的新东西不多。但是还是给大家简单介绍一下老郭的这个项目吧。</p>

<p>老郭自己实现了一套浏览器的排版引擎，然后可以将正常的 HTML 和 CSS “翻译” 成原生的控件，这样就可以用 HTML 和 CSS 来写界面了。整个框架使用起来还是很cool的，大家去 star 一下他的这个项目吧，地址是：<a href="https://github.com/hackers-painters/samurai-native">samurai-native</a>。</p>

<p>最后多说一句，我觉得老郭的方案和 React Native 不是竞争关系。因为这两个框架解决问题的思路完全不一样。如果没有更新逻辑的需求，老郭的方案可能更适合天猫团队。当然，不管是samurai-native还是react native，现在都还没有开源出对 Android端的支持，不过这都只是时间问题。</p>

<h2>移动时代用户端问题高效诊断 &ndash; 腾讯社交网络运维负责人 马玉明</h2>

<p>主要讲了移动 App 优化、云诊断技术架构、未来展望。</p>

<p>客户端优化：</p>

<ul>
<li>网络定时驱动到事件驱动</li>
<li>TCP 粘包和半包处理</li>
<li>网络线程</li>
</ul>


<p>网关劫持：</p>

<ul>
<li>下发 HTTP 页面&mdash;检测 html 页面并且 webview 展示</li>
<li>下发错误数据</li>
<li>协议和端口限制&mdash;后台优化，客户端轮换 ip。私有协议用 443 端口成功率比较高。</li>
<li>异步启动的协议和端口限制</li>
<li>协议包头（异步）检测劫持</li>
</ul>


<p>移动网络容灾调度：</p>

<ul>
<li>server iplist 拉取和 push</li>
<li>移动终端网络质量数据监控</li>
<li>支持版本、地区、运营商、ip 段，qq 号的调度</li>
<li>具备断网、失效身份、踢下线、屏蔽命令字、进程自杀等能力</li>
</ul>


<p>其中的很多问题我们都曾经遇到过，比如被运营商封禁这种事情。私下和马玉明聊天，他说他们都不敢把一些内容放到 qq.com 之外的其它域名，因为由于 QQ 的流量很大，运营商是不封禁的，而其它域名，一旦流量太大，很可能就被运营商给封禁了。所以在这方面，由于有移动运营商这一层，在运维上还有挺多事情需要做的。</p>

<p>最后马玉明成分享了他们的云诊断平台：<a href="http://huatuo.qq.com">http://huatuo.qq.com</a> 。</p>

<h2>美团移动平台背后的技术 &ndash; 陈晓亮</h2>

<p>陈晓亮也从美团的业务出发，介绍了他们的做法。具体细节和最先提到的 gaosboy 的做法不同，但都是为了与自己的业务模式契合。</p>

<p>简单来说，晓亮他们用平台 + 频道来解决业务线种类多、差异大的问题。用 CocoaPods 、Jenkins 等来做代码的依赖和集成。</p>

<p>另外，他们利用类似注册的方法，来解决模块之间的解耦。他们把这个方法叫做 Protal。我听着感觉和 Android 的发 Intent 类似。即每个页面可以向一个中心注册，说我提供哪些服务，然后这个中心就知道每个服务应该用哪个类来处理。当要进行服务切换时，这个中心来负责做相应类的实例化，页面跳转等逻辑。服务在 iOS 里面可以用自定义的 url 来表示。注册中心可以拿一个单例来实现。</p>

<p>关于这种页面之前解耦，其实最早 Facebook 的 three20 框架就有。不过 Facebook 把它叫做 Router。three20 被废弃之后，也有很多人开源相应的解决方案。我记得 gaosboy 就开源过 <a href="https://github.com/gaosboy/urlmanager">urlmanager</a>， github 上也有一个叫 <a href="https://github.com/Huohua/HHRouter">HHRouter</a> 的开源库，大家感兴趣可以自已学习下。</p>

<p>另外我才知道，美团他们大量使用了 ReactiveCocoa，有机会真是想好好讨论一下。</p>

<p>这次分享也见到了同在美团的梁士兴，我们以前一起在 IBM 的 Symphony 项目组实习过。</p>

<h2>谷歌，投资，创业：懂技术的优势和通病 &ndash;  技德科技 CEO 周哲</h2>

<p>这位 Google 的第 103 号员工在财务自由之后，做了一段天使投资人，然后选择了创业。他给我们讲了他在谷歌、投资、创业中的故事。</p>

<p>在看完《从 0 到 1》之后，再听他的故事，就觉得更加有趣了。因为你会发现，《从 0 到 1》里面提到的，“发现秘密” 这件事情，真是的非常困难的。Google 在早期，在很长一段时间内都没有考虑用广告来赢利，在最初做 Adwords 的时候，也只有 2.5 个工程师在做，而且这些工程师从来不点广告，认为这个东西做出来没人用。</p>

<p>那事情的结果大家都知道了，广告成了搜索引擎公司最大的收入来源。现在看来，大家会觉得这个想法是非常自然的，但是如果真的是这样的话，当时的搜索巨头雅虎就不会把这块业务”OEM“给 Google 来做了。</p>

<p>关于投资，周哲说虽然投兰亭集势成功了，投资主要的收获是那些失败的案例。而且选择创业，自然是认为他看到了另一个未被人发现的” 秘密 “。他讲了好几个故事，包括：教他编程的爸爸不会用 Windows 8，他自己花了 5 分钟不知道 Windows 8 如何关机，他当初是如何嘲笑 iPad 就是一个大一号的 iPhone，为什么大家现在还要用笔记本。最终他觉得当前没有谁在这方面很好地解决了用户的痛点，于是他选择了自己创业。</p>

<p>他的创业作品在 <a href="http://www.jide.com/">http://www.jide.com/</a> ，是一个基于 Android 的、带键盘的笔记本。</p>

<h2>总结</h2>

<p>听了两天的 QCon，感觉大会整体的质量在逐年提高，自己的收获也很多，希望明年能够办得更好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第43期]]></title>
    <link href="http://blog.devtang.com/blog/2015/04/24/ios-weekly-43/"/>
    <updated>2015-04-24T20:59:43+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/04/24/ios-weekly-43</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2015/04/ios-weekly-wwdc">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期 iOS 移动开发周报带来如下内容：WWDC 2015 将于 6 月 8 日在旧金山开幕、react-native 之布局篇、iOS 应用架构谈、iOS 证书及 ipa 包重签名探究、开源项目Kingfisher和samurai-native等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/it/2015-04-14/doc-iavxeafs5472422.shtml">《WWDC 2015 将于 6 月 8 日在旧金山开幕》</a>：苹果于 4 月 14 日宣布，将于 6 月 8 日至 6 月 12 日在旧金山召开第 26 届年度全球开发者大会 (WWDC)。预计大会上将会发布 iOS 9 新版移动系统及用于 Mac 电脑的新版 OS X 系统。鉴于 Apple Watch 的重要性，这次也许苹果会将更多精力放在自己的智能手表生态建设上。苹果每次邀请函设计或多或少都有隐藏含义，本次方圆融合也许就体现了手表的特点。</p></li>
<li><p><a href="http://www.macrumors.com/2015/04/13/ios-8-3-ifunbox-itools-sandbox-app-access/">《iOS 8.3 阻止了 iFunBox, iExplorer 等软件》</a>：苹果对 iOS 8.3 加强了安全性，阻止了 iFunBox, iExplorer 等软件来连接到 iOS 设备进行相应的管理操作。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="https://github.com/tmallfe/tmallfe.github.io/issues/19">《react-native 之布局篇》</a>：来自天猫的 @sysu_ 学家 同学实践并整理了一篇关于 React Native 的文章，详细丰富的介绍了 React Native 布局的知识。</p></li>
<li><p><a href="http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html">《iOS 应用架构谈：开篇》</a>：对于 iOS 客户端应用的架构来说，复杂度不亚于服务端，但侧重点和入手点却跟服务端不太一样。本系列文章作者会主要专注在 iOS 应用架构方面，很多方案也是基于 iOS 技术栈的特点而建立的。本文是该系列第一篇。</p></li>
<li><p><a href="http://answerhuang.duapp.com/index.php/2015/04/19/jenkins/">《我是怎么慢慢变懒的 : Jenkins + 蒲公英》</a>：任何工具出现的最初目的都是为了提高生产效率，很庆幸在 iOS 开发的这个圈子中有一大批的先驱者，他们创造并开源了很多优秀的工具，为这个环境奠定了一个良好的基础。本文作者 <a href="http://weibo.com/u/1623064627?s=6cm7D0">@answer-huang</a> 介绍了使用 Jenkins 和蒲公英来完成自动打包和分发测试包的工作。</p></li>
<li><p><a href="http://www.olinone.com/?p=198">《iOS 证书及 ipa 包重签名探究》</a>：本文重点在于介绍 ios8.1.3 系统 ipa 包重签名 (如企业证书) 无法安装的问题。苹果在 iOS8.1.3 系统以后加强了对 ipa 安装包签名的验证，主要区别在于 ipa 唯一标识在原有 Bundle Identifier 的基础上增加了证书 ID，也就说安装包和手机上已安装 APP 的 Bundle Identifier 即使一致，如果两者签名的证书 ID 不相同，那么安装包也无法正常安装。</p></li>
<li><p><a href="http://blog.knownsec.com/2015/04/iphone-target-analysis-and-exploitation-with-apple(udid">《iPhone 目标分析及使用 UDID 实施入侵》</a>/)：iPhone 有一些强大而实用的功能，例如定位追踪和远程数据擦除。这其实都得益于它的唯一设备识别符 UDID（Unique Device Identifier）。本文描述了发掘 iPhone 目标终端设备、利用量子计划（QUANTUM）直接植入目标的标准分析技术，说明 iPhone 唯一设备识别符（Unique Device Identifier，简称 UDID）可以用于追踪目标或与终端设备及目标电话相关联，强调该入侵技术目前可以实现并实施进一步定位的 CNE 过程。</p></li>
<li><p><a href="http://apple.stackexchange.com/questions/176555/how-do-i-make-multiple-screen-recordings-with-the-exact-same-portion-of-the-scre/176595#176595">《录屏技巧》</a>：本文介绍了用 Swift 打开 QuickTime Player 录制指定区域的奇技淫巧。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://github.com/burczyk/XcodeSwiftSnippets">XcodeSwiftSnippets</a>：XcodeSwiftSnippets 提供了很多可在 Xcode 上使用的 Swift 语言的代码片段 , 通过自动补全的方式，可以极大的提高开发效率。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a>：Kingfisher 是一个用于图片缓存的开源库，类似  SDWebImage，但是完全基于 Swift 语言开发。</p></li>
<li><p><a href="https://github.com/hackers-painters/samurai-native">samurai-native</a>：samurai-native 是 <a href="http://weibo.com/u/1641892107?topnav=1&amp;wvr=6&amp;topsug=1">@ 老郭为人民服务</a> 开源的一套新的构建 App 框架，可以使用 HTML 和 CSS 来生成原生的应用界面。</p></li>
<li><p><a href="https://github.com/boycechang/BCMagicTransition">BCMagicTransition</a>：BCMagicTransition 是一个动效框架，用于自定义 UINavigationController 的切换动画，效果类似 Keynote 软件中 Magic Move 切换。它可以用于任意两个 UIViewController 之间，只需指定两个 VC 中的相同元素即可。</p></li>
<li><p><a href="https://github.com/cikelengfeng/RPAXU">Refresh Plugins After Xcode Upgrading</a>：每当 Xcode 升级之后，都会导致原有的 Xcode 插件不能使用，这是因为每个插件的 Info.plist 中记录了该插件兼容的 Xcode 版本的 DVTPlugInCompatibilityUUID，而每个版本的 Xcode 的 DVTPlugInCompatibilityUUID 都是不同的。如果想让原来的插件继续工作，我们就得将新版 Xcode 的 DVTPlugInCompatibilityUUID 加入到每一个插件的 Info 文件中，手动添加的话比较费时间还可能出错，所以作者写了一个脚本来做这件事。</p></li>
<li><p><a href="https://github.com/ResearchKit/ResearchKit">ResearchKit</a>：ResearchKit 是苹果开源的方便科研机构创建 App 的框架。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第42期]]></title>
    <link href="http://blog.devtang.com/blog/2015/04/09/ios-weekly-42/"/>
    <updated>2015-04-09T22:15:52+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/04/09/ios-weekly-42</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2015/04/facebook-react-native">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期 iOS 移动开发周报带来如下内容：Facebook 正式开源 React Native、React 入门实例教程、React Native 通信机制详解等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.csdn.net/article/2015-03-27/2824323-facebook-open-sources-react-native">用 JavaScript 开发移动原生应用，Facebook 正式开源 React Native</a>：Facebook 正式开源了 <a href="https://github.com/facebook/react-native">React Native</a>，不过目前，只有 iOS 版，Android 版还需再等一段时间，这是最新的用 JavaScript 语言开发原生 App 的尝试。Facebook 同时还为 React Native 开发了一款基于 Atom 的 IDE：Nuclide，也已开源。</p></li>
<li><p><a href="http://weibo.com/p/1001603823955516487761">谷歌发现用于中间人攻击的证书</a>：根据谷歌官方安全博客报道，谷歌发现 CNNIC 颁发了多个针对谷歌域名的用于中间人攻击的证书。该证书冒充成受信任的谷歌的域名，被用于部署到网络防火墙中，用于劫持所有处于该防火墙后的 HTTPS 网络通信，而绕过浏览器警告。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://www.jianshu.com/p/1bde36ad9938">《轻松学习 Objective-C 消息转发》</a>：作者在文章中通过一个小例子来讲解什么是消息转发，以及如何消息转发，希望看完这篇文章时大家会彻底的明白 OC 的消息转发机制。</p></li>
<li><p><a href="http://www.ruanyifeng.com/blog/2015/03/react.html">《React 入门实例教程》</a>：React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。本文是阮一峰原创的入门教程。</p></li>
<li><p><a href="http://blog.cnbang.net/tech/2698/">《React Native 通信机制详解》</a>：React Native 是 facebook 刚开源的框架，可以用 javascript 直接开发原生 APP，先不说这个框架后续是否能得到大众认可，单从源码来说，这个框架源码里有非常多的设计思想和实现方式值得学习，本文介绍了它最基础的 JavaScript-ObjectC 通信机制。</p></li>
<li><p><a href="http://onevcat.com/2015/03/cross-platform/">《跨平台开发时代的 (再次) 到来？》</a>：这篇文章主要想谈谈最近又刮起的移动开发跨平台之风，并着重介绍和对比一下像是 Xamarin，NativeScript 和 React Native 之类的东西。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2015/03/22/ios-dev-controversy-2/">《iOS 开发中的争议（二）》</a>：本文作者分享了 iOS 中的一个争议话题：对于 UI 界面的编写工作，到底应该用 xib/storyboard 完成，还是用手写代码来完成？</p></li>
<li><p><a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/">《正确使用 Block 避免 Cycle Retain 和 Crash》</a>：Block 作为 C 语言的扩展，并不是高新技术，和其他语言的闭包或 lambda 表达式是一回事。需要注意的是由于 Objective-C 在 iOS 中不支持 GC 机制，使用 Block 必须自己管理内存，而内存管理正是使用 Block 坑最多的地方，错误的内存管理 要么导致 return cycle 内存泄漏要么内存被提前释放导致 crash。本文介绍了从 Block 实现原理切入，介绍了使用 Block 需要注意的地方。</p></li>
<li><p><a href="http://tutuge.me/2015/03/29/bind-data-to-gcd-queue/">《为 GCD 队列绑定 NSObject 类型上下文数据-利用 __bridge_retained(transfer) 转移内存管理权》</a>：本文介绍了如何合理运用 <code>__bridge_retained(transfer)</code> 关键字转换对象的内存管理权，让我们自己控制对象的生命周期。</p></li>
<li><p><a href="http://staltz.com/dont-react/#/">《Don&rsquo;t React》</a>：本文作者从多方面分享了他对于 React 框架的负面看法。通过此文，大家可以更加客观地了解 React 这个框架。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://developer.apple.com/library/ios/samplecode/Lister/Introduction/Intro.html">Lister</a>：Lister 是苹果提供的官方 Demo。包含了 iOS、Mac 和 Apple Watch 版本，并且为这个 demo 分别用 Objective-C 和 Swift 实现了一遍，最后还包括了 30 页的文档。</p></li>
<li><p><a href="https://github.com/iSimar/HackerNews-React-Native">HackerNews-React-Native</a>：HackerNews-React-Native 是用 React Native 完成的 HackerNews 客户端。</p></li>
<li><p><a href="https://github.com/recruit-mp/RMPZoomTransitionAnimator">RMPZoomTransitionAnimator</a>：RMPZoomTransitionAnimator 是一个放大缩小的动效开源库，可以实现图片的放大缩小效果。</p></li>
<li><p><a href="https://github.com/adad184/MMTweenAnimation">MMTweenAnimation</a>：MMTweenAnimation 是一个基于 POP 的扩展，提供了 10 种自定义的动效。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第41期]]></title>
    <link href="http://blog.devtang.com/blog/2015/03/24/ios-weekly-41/"/>
    <updated>2015-03-24T16:22:45+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/03/24/ios-weekly-41</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2015/03/evaluate-react-native">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期 iOS 移动开发周报带来如下内容：如何评价 React Native、用纯代码构建一个 Widget、FastImageCache 解析等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.cocoachina.com/apple/20150310/11273.html">苹果推出 Apple Watch</a>：3 月 10 日，苹果公司 2015 年春季发布会在美国旧金山芳草地艺术中心召开。苹果在会上宣布推出 Apple Watch，续航时间为 18 小时。Apple Watch 将于 4 月 10 日开始预售，4 月 24 日开始发货。首批发售区域包含中国。</p></li>
<li><p><a href="http://www.csdn.net/article/2015-03-13/2824206-cocoapods-036-adds-swift-framework">CocoaPods 0.36 正式发布，实现 Swift 和 iOS 8 动态框架支持</a>：CocoaPods 于近日发布了 CocoaPods 0.36 正式版，其最大的改动便是为 iOS 引入了动态框架，并增加了对 AlamoFire、SwiftyJSON 等使用 Swift 所编写的库的支持，此举将影响包括 CocoaPods/Xcodeproj 在内的所有 CocoaPods gems。</p></li>
<li><p><a href="http://weibo.com/1989324563/C8khmrwB3?ref=&amp;type=comment#_rnd1426425896500">苹果开始整治 iMessage 垃圾信息</a>：苹果在最新的 iOS 更新中，集成了更加方便的举报 iMessage 垃圾信息的功能。这将使得用户可以更方便地举报垃圾信息。</p></li>
<li><p><a href="http://www.cocoachina.com/programmer/20150316/11339.html">2014 iOS 开发者收入调查报告（二）：企业开发者篇</a>：本次调研以 CocoaChina 网站用户为基础，总样本数量为 3591，调研时间为 2014 年 12 月 16 日-2015 年 1 月 31 日。调查报告的内容涉及开发经验、工作年限、待遇和工资满意度。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://www.zhihu.com/question/27852694/answer/41704172">《如何评价 React Native？》</a>：来自知乎的这个回答详细介绍了 Facebook 即将开源的 React Native 的相关知识，包括核心实现、设计考虑、以及 React Native 的优势和劣势。</p></li>
<li><p><a href="http://www.jianshu.com/p/221507eb8590">《iOS 开发的一些小技巧篇一》</a>：<a href="http://weibo.com/u/2159267225?from=feed&amp;loc=nickname">@ 武蕴牛 x</a> 总结了 iOS 开发中的一些小技巧。</p></li>
<li><p><a href="http://www.jianshu.com/p/80ebbb1950ba">《iOS 开发的一些小技巧篇二》</a>：<a href="http://weibo.com/u/2159267225?from=feed&amp;loc=nickname">@ 武蕴牛 x</a> 总结了 iOS 开发中的关于截图的技巧。</p></li>
<li><p><a href="http://adad184.com/2014/10/29/2014-10-29-how-to-setup-today-extension-programmatically/">《如何用纯代码构建一个 Widget(today extension)》</a>：随着 iOS8 的发布，各种 iPhone 的新玩法出现了，其中最引人关注的就是 today extension(也叫做 widget)。网上有很多相关的文章教你如何编写一个简单的 widget，但是却没有一篇适合我们这种纯代码的拥趸。本文介绍了如何用纯代码的方式来构建一个 widget。</p></li>
<li><p><a href="http://blog.cnbang.net/tech/2578/">《iOS 图片加载速度极限优化—FastImageCache 解析》</a>：FastImageCache 是 Path 团队开发的一个开源库，用于提升图片的加载和渲染速度，让基于图片的列表滑动起来更顺畅，本文分析了它的实现方式。</p></li>
<li><p><a href="http://www.cocoachina.com/ios/20150318/11350.html">《Swift 语言 iOS 开发：CALayer 十则示例》</a>：我们在 iOS 应用中看到的都是视图，包括按钮视图、表视图、滑动条视图，还有可以容纳其他视图的父视图等。但你或许不知道在 iOS 中支撑起每个视图的是一个叫做 &ldquo; 图层（layer）&rdquo; 的类，确切地说是 CALayer。本文中您会了解 CALayer 及其工作原理，还有应用 CALayer 打造酷炫效果的十则示例，比如绘制矢量图形、渐变色，甚至是粒子系统。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2015/03/15/ios-dev-controversy-1/">《iOS 开发中的争议（一）》</a>：作者在文章中讨论了关于 Objective-C 语言中如下问题的争议：类的成员变量应该如何定义？</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://github.com/qfish/QLImageset">QLImageset</a>：QLImageset 是一个 QuickLook 插件：快速预览 imageset 文件夹包含的图片及其尺寸。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/Yalantis/Persei">Persei</a>：Persei 是一个在顶部显示或隐藏菜单的 Swift 开源库。</p></li>
<li><p><a href="https://github.com/bryankeller/BLKFlexibleHeightBar">BLKFlexibleHeightBar</a>：BLKFlexibleHeightBar 是一个使导航栏高度可以动态变化的 UI 库。</p></li>
<li><p><a href="https://github.com/hyperoslo/Form">Form</a>：Form 是一个方便开发者创建表单填写工作的 UI 库。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
